{
  
    
        "post0": {
            "title": "My Title",
            "content": "Assignment 3 . Pandas and plotting exercises . import pandas as pd . In Week 2, you used a dataset from the CORGIS website. You may have used either the Python, CSV, or JSON data files. . For this assignment, use the CSV file format for the same category of data that you used previously. . # Use pandas read_csv function to import the data into a dataframe variable earthquakes = pd.read_csv(&#39;earthquakes.csv&#39;) . . There are 8394 rows and 18 columns. . # The info method (used above) gives information the column names as well earthquakes.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 8394 entries, 0 to 8393 Data columns (total 18 columns): # Column Non-Null Count Dtype -- -- 0 id 8394 non-null object 1 impact.gap 8394 non-null float64 2 impact.magnitude 8394 non-null float64 3 impact.significance 8394 non-null int64 4 location.depth 8394 non-null float64 5 location.distance 8394 non-null float64 6 location.full 8394 non-null object 7 location.latitude 8394 non-null float64 8 location.longitude 8394 non-null float64 9 location.name 8394 non-null object 10 time.day 8394 non-null int64 11 time.epoch 8394 non-null int64 12 time.full 8394 non-null object 13 time.hour 8394 non-null int64 14 time.minute 8394 non-null int64 15 time.month 8394 non-null int64 16 time.second 8394 non-null int64 17 time.year 8394 non-null int64 dtypes: float64(6), int64(8), object(4) memory usage: 1.2+ MB . There are 18 columns. The column names are: id, impact.gap, impact.magnitude, impact.significance, location.depth, location.distance, location.full, location.latitude, location.longitude, location.name, time.day, time.epoch, time.full, time.hour, time.minute, time.month, time.second, and time.year. . # Once again, the info method gives information about this in the last column. earthquakes.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 8394 entries, 0 to 8393 Data columns (total 18 columns): # Column Non-Null Count Dtype -- -- 0 id 8394 non-null object 1 impact.gap 8394 non-null float64 2 impact.magnitude 8394 non-null float64 3 impact.significance 8394 non-null int64 4 location.depth 8394 non-null float64 5 location.distance 8394 non-null float64 6 location.full 8394 non-null object 7 location.latitude 8394 non-null float64 8 location.longitude 8394 non-null float64 9 location.name 8394 non-null object 10 time.day 8394 non-null int64 11 time.epoch 8394 non-null int64 12 time.full 8394 non-null object 13 time.hour 8394 non-null int64 14 time.minute 8394 non-null int64 15 time.month 8394 non-null int64 16 time.second 8394 non-null int64 17 time.year 8394 non-null int64 dtypes: float64(6), int64(8), object(4) memory usage: 1.2+ MB . The datatypes of each column are: id -- object, impact.gap -- float64, impact.magnitude -- float64, impact.significance -- int64, location.depth -- float64, location.distance -- float64, location.full -- object, location.latitude -- float64, location.longitude -- float64, location.name -- object, time.day -- int64, time.epoch -- int64, time.full -- object, time.hour -- int64, time.minute -- int64, time.month -- int64, time.second -- int64, and time.year -- int64. . # head(2) will allow me to look at the first two rows earthquakes.head(2) . id impact.gap impact.magnitude impact.significance location.depth location.distance location.full location.latitude location.longitude location.name time.day time.epoch time.full time.hour time.minute time.month time.second time.year . 0 nc72666881 | 122.0 | 1.43 | 31 | 15.12 | 0.1034 | 13km E of Livermore, California | 37.672333 | -121.6190 | California | 27 | 1469593183550 | 2016-07-27 00:19:43 | 0 | 19 | 7 | 43 | 2016 | . 1 us20006i0y | 30.0 | 4.90 | 371 | 97.07 | 1.4390 | 58km WNW of Pakokku, Burma | 21.514600 | 94.5721 | Burma | 27 | 1469593228220 | 2016-07-27 00:20:28 | 0 | 20 | 7 | 28 | 2016 | . # tail(2) will allow me to look at the first two rows earthquakes.tail(2) . id impact.gap impact.magnitude impact.significance location.depth location.distance location.full location.latitude location.longitude location.name time.day time.epoch time.full time.hour time.minute time.month time.second time.year . 8392 ci37672328 | 103.0 | 1.55 | 37 | 29.25 | 0.06980 | 6km NNW of Chatsworth, CA | 34.308000 | -118.635333 | California | 25 | 1472182571880 | 2016-08-25 23:36:11 | 23 | 36 | 8 | 11 | 2016 | . 8393 ci37672360 | 99.0 | 0.89 | 12 | 8.29 | 0.02562 | 14km NE of Yucaipa, CA | 34.119167 | -116.933667 | California | 25 | 1472183881830 | 2016-08-25 23:58:01 | 23 | 58 | 8 | 1 | 2016 | . # describe() module allows us to print summary stats earthquakes.describe() . impact.gap impact.magnitude impact.significance location.depth location.distance location.latitude location.longitude time.day time.epoch time.hour time.minute time.month time.second time.year . count 8394.000000 | 8394.000000 | 8394.000000 | 8394.000000 | 8394.000000 | 8394.000000 | 8394.000000 | 8394.000000 | 8.394000e+03 | 8394.000000 | 8394.000000 | 8394.000000 | 8394.000000 | 8394.0 | . mean 111.832581 | 1.512941 | 56.343817 | 23.051817 | 0.375820 | 39.713009 | -111.863853 | 14.999047 | 1.470799e+12 | 11.323922 | 29.326662 | 7.821777 | 29.277341 | 2016.0 | . std 81.410408 | 1.152668 | 96.677536 | 51.081531 | 1.547686 | 18.404840 | 62.943337 | 9.223647 | 7.281744e+08 | 6.967305 | 17.303331 | 0.382723 | 17.146283 | 0.0 | . min 0.000000 | 0.010000 | 0.000000 | -3.390000 | 0.000000 | -59.611900 | -179.978000 | 1.000000 | 1.469593e+12 | 0.000000 | 0.000000 | 7.000000 | 0.000000 | 2016.0 | . 25% 57.000000 | 0.740000 | 8.000000 | 3.800000 | 0.006667 | 34.051542 | -146.522150 | 7.000000 | 1.470182e+12 | 5.000000 | 14.000000 | 8.000000 | 15.000000 | 2016.0 | . 50% 96.000000 | 1.200000 | 22.000000 | 8.900000 | 0.051300 | 38.272100 | -119.737350 | 14.000000 | 1.470752e+12 | 11.000000 | 29.000000 | 8.000000 | 29.000000 | 2016.0 | . 75% 156.000000 | 1.880000 | 54.000000 | 15.800000 | 0.167650 | 51.808350 | -116.717500 | 23.000000 | 1.471398e+12 | 17.000000 | 44.000000 | 8.000000 | 44.000000 | 2016.0 | . max 358.000000 | 7.700000 | 2674.000000 | 622.130000 | 40.547000 | 84.029100 | 179.959400 | 31.000000 | 1.472184e+12 | 23.000000 | 59.000000 | 8.000000 | 59.000000 | 2016.0 | . # In the form df[columnname] -- I&#39;ll be looking at the time.day column earthquakes[&#39;time.day&#39;] . 0 27 1 27 2 27 3 27 4 27 .. 8389 25 8390 25 8391 25 8392 25 8393 25 Name: time.day, Length: 8394, dtype: int64 . # I&#39;m picking the impact.magnitude column, which &quot;is a measure of the size of an earthquake at its source&quot;. # It is numerical and typically ranges from -1 to 10 (least -&gt; most powerful) # I&#39;m picking the x value to be id and the y value to be the magnitude earthquakes.plot(x=&#39;id&#39;, y=&#39;impact.magnitude&#39;) . &lt;AxesSubplot:xlabel=&#39;id&#39;&gt; . I am going to try to make the plot bigger, since there are so many data values, to see if it will clean up the plot a bit. . earthquakes.plot(x=&#39;id&#39;, y=&#39;impact.magnitude&#39;, figsize=(20,5)) . &lt;AxesSubplot:xlabel=&#39;id&#39;&gt; . This made it a bit better, but not by that much. There&#39;s too many datapoints to see this data very well. I&#39;ll also try to do this plot again by sorting the data to see if it forms a clear line/plot, and to see what range of values this graph produces. . earthquakes.sort_values(by=&#39;impact.magnitude&#39;).plot(x=&#39;id&#39;, y=&#39;impact.magnitude&#39;, figsize=(20,5)) . &lt;AxesSubplot:xlabel=&#39;id&#39;&gt; . The flatter the line between two points, it means that there was more frequency in that range. So we can see that there are a bunch of smaller earthquakess, but as we approach a higher magnitude, there are less of them. . earthquakes.loc[[0,1,2,3,4,5,6,7,8,9], [&#39;impact.magnitude&#39;]] . impact.magnitude . 0 1.43 | . 1 4.90 | . 2 0.06 | . 3 0.40 | . 4 0.30 | . 5 1.80 | . 6 1.00 | . 7 2.00 | . 8 1.20 | . 9 1.67 | . # as well as the matching 10 elements of a different column that has interesting text # The column I chose for text is location.name # In order to get the first 10 values, I needed to provide indices for them (0-&gt;9) earthquakes.loc[[0,1,2,3,4,5,6,7,8,9], [&#39;impact.magnitude&#39;, &#39;location.name&#39;]] . impact.magnitude location.name . 0 1.43 | California | . 1 4.90 | Burma | . 2 0.06 | California | . 3 0.40 | California | . 4 0.30 | Nevada | . 5 1.80 | Alaska | . 6 1.00 | Hawaii | . 7 2.00 | Alaska | . 8 1.20 | California | . 9 1.67 | California | . # and make a bar plot with the text values horizontally and the numeric values as the bar heights # magLoc means magnitude and location, since these are the two values that I saved magLoc = earthquakes.loc[[0,1,2,3,4,5,6,7,8,9], [&#39;impact.magnitude&#39;, &#39;location.name&#39;]] magLoc.plot(kind=&#39;bar&#39;, x=&#39;location.name&#39;) . &lt;AxesSubplot:xlabel=&#39;location.name&#39;&gt; . magLoc.plot(kind=&#39;barh&#39;, x=&#39;location.name&#39;) . &lt;AxesSubplot:ylabel=&#39;location.name&#39;&gt; . # and change at least two aesthetic elements (colors, labels, titles, ...) # Make the earthquakes that happen in &quot;California&quot; in purple barcolors = [] for i in magLoc.index: if magLoc.loc[i,&#39;location.name&#39;] in [&#39;California&#39;]: barcolors.append(&#39;purple&#39;) else: barcolors.append(&#39;grey&#39;) print(barcolors) . [&#39;purple&#39;, &#39;grey&#39;, &#39;purple&#39;, &#39;purple&#39;, &#39;grey&#39;, &#39;grey&#39;, &#39;grey&#39;, &#39;grey&#39;, &#39;purple&#39;, &#39;purple&#39;] . ax = magLoc.plot(kind=&#39;barh&#39;, x=&#39;location.name&#39;, y=&#39;impact.magnitude&#39;, color=barcolors) ax.legend([&#39;Magnitude of Earthquake&#39;]) . &lt;matplotlib.legend.Legend at 0x7fc918c1c2b0&gt; . Free form section . Choose another type of plot that interests you from the pandas.DataFrame.plot documentation [look at the &#39;kind&#39; parameter] and make a new plot of your dataset values using the plot type | . dotcolors = [] for i in magLoc.index: if magLoc.loc[i,&#39;location.name&#39;] in [&#39;California&#39;]: dotcolors.append(&#39;purple&#39;) elif magLoc.loc[i,&#39;location.name&#39;] in [&#39;Burma&#39;]: dotcolors.append(&#39;blue&#39;) elif magLoc.loc[i,&#39;location.name&#39;] in [&#39;Nevada&#39;]: dotcolors.append(&#39;red&#39;) elif magLoc.loc[i,&#39;location.name&#39;] in [&#39;Alaska&#39;]: dotcolors.append(&#39;pink&#39;) else: dotcolors.append(&#39;green&#39;) ax = magLoc.plot(kind=&#39;scatter&#39;, x=&#39;location.name&#39;, y=&#39;impact.magnitude&#39;, color=dotcolors) ax.legend([&#39;Magnitude of Earthquake&#39;]) . &lt;matplotlib.legend.Legend at 0x7fc918b22cd0&gt; . Copy some of your analysis from the Week 2 assignment into new cells below | Clean them up if desired, and make sure that you translate them to work with your new pandas dataframe structure here if needed | Create several plots to complement and extend your analysis | . In the week 2 assignment, I did a couple of operations with mathematical operators, functions, and modules to work with the data. In the following section, I will try to replicate some of thesee features using csv data as opposed to python data, and add some more plots and analysis. . # Use the loc method earthquakes.loc[[0]] . id impact.gap impact.magnitude impact.significance location.depth location.distance location.full location.latitude location.longitude location.name time.day time.epoch time.full time.hour time.minute time.month time.second time.year . 0 nc72666881 | 122.0 | 1.43 | 31 | 15.12 | 0.1034 | 13km E of Livermore, California | 37.672333 | -121.619 | California | 27 | 1469593183550 | 2016-07-27 00:19:43 | 0 | 19 | 7 | 43 | 2016 | . Now, I want to try implementing a mathematical operation. For this very first data value (shown above), I will multiply the depth value by 1000 to change the units from km to m. . Note: According to this webpage, the depth of an earthquake is measured in kilometers. . #modified: earthquake_data[0][&#39;location&#39;][&#39;depth&#39;] -&gt; earthquakes.loc[0, &#39;location.depth&#39;] depth_meters = earthquakes.loc[0, &#39;location.depth&#39;] * 1000 print(&quot;Depth in meters is: &quot; + str(depth_meters) + &quot; meters.&quot;) . Depth in meters is: 15120.0 meters. . This matches last weeks assignment, which produced the same result. . Now, I&#39;m going to experiment with conditional expressions. According to this website, also listed in the mathematical operations section, mentions that &quot;Shallow earthquakes are between 0 and 70 km deep; intermediate earthquakes, 70 - 300 km deep; and deep earthquakes, 300 - 700 km deep&quot;, which I am going to apply to the first data value. . # 0-&gt;70 km = Shallow # 70-&gt;300 km = Intermediate # 300-&gt;700 k = Deep #modified: earthquake_data[0][&#39;location&#39;][&#39;depth&#39;] -&gt; earthquakes.loc[0, &#39;location.depth&#39;] if (earthquakes.loc[0, &#39;location.depth&#39;] &lt; 70): print(&quot;This is a shallow earthquake.&quot;) elif (earthquakes.loc[0, &#39;location.depth&#39;] &lt; 300): print(&quot;This is an intermediate earthquake&quot;) else: print(&quot;This is an deep earthquake&quot;) . This is a shallow earthquake. . This matches last weeks assignment, which produced the same result. . In the following section, I&#39;m going to use loc/iloc to find all the deep earthquakes and plot their values. I don&#39;t think for loops are needed here because loc/iloc takes care of that. . earthquakes.loc[earthquakes[&#39;location.depth&#39;] &gt; 300] . id impact.gap impact.magnitude impact.significance location.depth location.distance location.full location.latitude location.longitude location.name time.day time.epoch time.full time.hour time.minute time.month time.second time.year . 112 us100069gq | 84.0 | 4.4 | 298 | 540.25 | 4.539 | 192km NE of Ndoi Island, Fiji | -19.3536 | -177.4688 | Fiji | 27 | 1469629337280 | 2016-07-27 10:22:17 | 10 | 22 | 7 | 17 | 2016 | . 226 us100069i2 | 176.0 | 4.4 | 298 | 599.55 | 8.139 | South of the Fiji Islands | -25.9135 | 178.4949 | South of the Fiji Islands | 27 | 1469666202670 | 2016-07-27 20:36:42 | 20 | 36 | 7 | 42 | 2016 | . 698 us100069r1 | 257.0 | 4.0 | 246 | 442.35 | 5.700 | 174km WSW of L&#39;Esperance Rock, New Zealand | -31.9132 | 179.3506 | New Zealand | 29 | 1469802600160 | 2016-07-29 10:30:00 | 10 | 30 | 7 | 0 | 2016 | . 1115 us100068va | 94.0 | 4.5 | 312 | 534.48 | 5.766 | South of the Fiji Islands | -23.7475 | -179.9510 | South of the Fiji Islands | 30 | 1469912128690 | 2016-07-30 16:55:28 | 16 | 55 | 7 | 28 | 2016 | . 1277 us10006a4d | 159.0 | 4.4 | 298 | 552.91 | 4.961 | 108km S of Ndoi Island, Fiji | -21.6264 | -178.6404 | Fiji | 31 | 1469957607890 | 2016-07-31 05:33:27 | 5 | 33 | 7 | 27 | 2016 | . 1285 us10006a4i | 148.0 | 4.4 | 298 | 568.61 | 4.725 | 148km ENE of Ndoi Island, Fiji | -19.9161 | -177.5090 | Fiji | 31 | 1469958617080 | 2016-07-31 05:50:17 | 5 | 50 | 7 | 17 | 2016 | . 1291 us100068yc | 63.0 | 4.9 | 369 | 510.15 | 5.648 | South of the Fiji Islands | -23.8527 | -179.8836 | South of the Fiji Islands | 31 | 1469960394250 | 2016-07-31 06:19:54 | 6 | 19 | 7 | 54 | 2016 | . 1319 us10006901 | 86.0 | 4.5 | 312 | 504.34 | 3.830 | South of the Fiji Islands | -26.2414 | 179.3729 | South of the Fiji Islands | 31 | 1469970423830 | 2016-07-31 09:07:03 | 9 | 7 | 7 | 3 | 2016 | . 1400 us10006915 | 153.0 | 4.1 | 259 | 313.51 | 3.377 | 185km N of Kuril&#39;sk, Russia | 46.9009 | 147.6890 | Russia | 31 | 1469992902520 | 2016-07-31 15:21:42 | 15 | 21 | 7 | 42 | 2016 | . 1463 us1000692q | 82.0 | 4.4 | 298 | 536.01 | 3.463 | 284km SSE of Tabiauan, Philippines | 3.7369 | 123.0631 | Philippines | 31 | 1470013999200 | 2016-07-31 21:13:19 | 21 | 13 | 7 | 19 | 2016 | . 1497 us10006acb | 168.0 | 4.0 | 246 | 513.20 | 4.578 | South of the Fiji Islands | -25.1055 | 179.8371 | South of the Fiji Islands | 1 | 1470024873220 | 2016-08-01 00:14:33 | 0 | 14 | 8 | 33 | 2016 | . 1508 us1000693g | 101.0 | 4.6 | 326 | 509.04 | 4.844 | South of the Fiji Islands | -24.8047 | 179.8540 | South of the Fiji Islands | 1 | 1470028316980 | 2016-08-01 01:11:56 | 1 | 11 | 8 | 56 | 2016 | . 1544 us10006949 | 97.0 | 4.4 | 298 | 303.82 | 3.531 | 31km W of Agrihan, Northern Mariana Islands | 18.7680 | 145.3657 | Northern Mariana Islands | 1 | 1470035287100 | 2016-08-01 03:08:07 | 3 | 8 | 8 | 7 | 2016 | . 1711 us10006996 | 52.0 | 4.3 | 284 | 564.06 | 3.254 | 271km SE of Lambasa, Fiji | -17.8301 | -178.5327 | Fiji | 1 | 1470073523490 | 2016-08-01 13:45:23 | 13 | 45 | 8 | 23 | 2016 | . 2045 us10006af1 | 178.0 | 4.3 | 284 | 528.57 | 6.002 | South of the Fiji Islands | -23.4608 | -179.8971 | South of the Fiji Islands | 2 | 1470167385530 | 2016-08-02 15:49:45 | 15 | 49 | 8 | 45 | 2016 | . 2068 us10006af2 | 103.0 | 4.5 | 312 | 622.13 | 6.191 | Vanuatu region | -14.9295 | 172.3000 | Vanuatu region | 2 | 1470173941310 | 2016-08-02 17:39:01 | 17 | 39 | 8 | 1 | 2016 | . 2078 us10006af3 | 175.0 | 4.2 | 271 | 501.74 | 6.979 | South of the Fiji Islands | -24.5027 | -179.9427 | South of the Fiji Islands | 2 | 1470176180820 | 2016-08-02 18:16:20 | 18 | 16 | 8 | 20 | 2016 | . 2104 us10006afc | 81.0 | 4.4 | 298 | 523.19 | 5.469 | 152km ESE of Ndoi Island, Fiji | -21.0197 | -177.2917 | Fiji | 2 | 1470185183580 | 2016-08-02 20:46:23 | 20 | 46 | 8 | 23 | 2016 | . 2267 us100069q5 | 37.0 | 4.5 | 312 | 611.84 | 3.146 | 276km N of Ndoi Island, Fiji | -18.1535 | -178.6700 | Fiji | 3 | 1470230463180 | 2016-08-03 09:21:03 | 9 | 21 | 8 | 3 | 2016 | . 2298 us100069sl | 89.0 | 4.4 | 298 | 553.62 | 4.262 | 59km NE of Ndoi Island, Fiji | -20.2611 | -178.2997 | Fiji | 3 | 1470238008360 | 2016-08-03 11:26:48 | 11 | 26 | 8 | 48 | 2016 | . 2384 us10006afw | 79.0 | 4.2 | 271 | 526.13 | 2.999 | 235km SE of Lambasa, Fiji | -17.6380 | -178.8027 | Fiji | 3 | 1470263999630 | 2016-08-03 18:39:59 | 18 | 39 | 8 | 59 | 2016 | . 2402 us10006afx | 143.0 | 4.4 | 298 | 538.08 | 3.652 | 294km NNE of Ndoi Island, Fiji | -18.0490 | -178.1246 | Fiji | 3 | 1470268349840 | 2016-08-03 19:52:29 | 19 | 52 | 8 | 29 | 2016 | . 2719 us10006a2k | 13.0 | 6.3 | 611 | 510.00 | 2.145 | 70km ENE of Iwo Jima, Japan | 24.9477 | 142.0074 | Japan | 4 | 1470327873540 | 2016-08-04 12:24:33 | 12 | 24 | 8 | 33 | 2016 | . 3093 us10006bsv | 77.0 | 4.4 | 298 | 567.13 | 4.506 | 34km SSE of Ndoi Island, Fiji | -20.9321 | -178.5556 | Fiji | 5 | 1470452387980 | 2016-08-05 22:59:47 | 22 | 59 | 8 | 47 | 2016 | . 3109 us10006bsz | 74.0 | 4.1 | 259 | 599.18 | 3.331 | 289km N of Ndoi Island, Fiji | -18.0412 | -178.4624 | Fiji | 5 | 1470455086500 | 2016-08-05 23:44:46 | 23 | 44 | 8 | 46 | 2016 | . 3180 us10006btm | 124.0 | 4.3 | 284 | 573.68 | 5.362 | South of the Fiji Islands | -23.0231 | 179.2082 | South of the Fiji Islands | 6 | 1470470336240 | 2016-08-06 03:58:56 | 3 | 58 | 8 | 56 | 2016 | . 3376 us10006ccd | 131.0 | 4.0 | 246 | 342.80 | 6.767 | 213km WNW of Farallon de Pajaros, Northern Mar... | 21.5472 | 143.1465 | Northern Mariana Islands | 6 | 1470527381330 | 2016-08-06 19:49:41 | 19 | 49 | 8 | 41 | 2016 | . 3751 us10006cwr | 143.0 | 4.3 | 284 | 503.77 | 7.122 | South of the Fiji Islands | -24.6090 | -179.7836 | South of the Fiji Islands | 8 | 1470629761640 | 2016-08-08 00:16:01 | 0 | 16 | 8 | 1 | 2016 | . 3914 us10006c1y | 128.0 | 4.5 | 312 | 372.28 | 3.146 | 116km WSW of L&#39;Esperance Rock, New Zealand | -31.8191 | 179.9594 | New Zealand | 8 | 1470664387390 | 2016-08-08 09:53:07 | 9 | 53 | 8 | 7 | 2016 | . 4029 us10006c6w | 76.0 | 4.4 | 298 | 531.25 | 5.819 | South of the Fiji Islands | -23.6888 | -179.9401 | South of the Fiji Islands | 8 | 1470697343920 | 2016-08-08 19:02:23 | 19 | 2 | 8 | 23 | 2016 | . 4129 us10006cys | 186.0 | 4.2 | 271 | 498.50 | 12.956 | South of the Fiji Islands | -24.6560 | -179.9177 | South of the Fiji Islands | 9 | 1470728468380 | 2016-08-09 03:41:08 | 3 | 41 | 8 | 8 | 2016 | . 4130 us10006cyu | 152.0 | 4.0 | 246 | 360.41 | 2.900 | 229km SW of Vostok, Russia | 47.3008 | 146.9788 | Russia | 9 | 1470728648370 | 2016-08-09 03:44:08 | 3 | 44 | 8 | 8 | 2016 | . 4563 us10006cn4 | 178.0 | 4.3 | 284 | 583.34 | 3.038 | 246km SE of Lambasa, Fiji | -17.7464 | -178.7591 | Fiji | 10 | 1470849096270 | 2016-08-10 13:11:36 | 13 | 11 | 8 | 36 | 2016 | . 5045 us10006d6y | 54.0 | 4.5 | 312 | 484.69 | 2.354 | 265km WNW of Chichi-shima, Japan | 27.8826 | 139.6848 | Japan | 12 | 1470976076080 | 2016-08-12 00:27:56 | 0 | 27 | 8 | 56 | 2016 | . 5251 us10006dfc | 70.0 | 4.2 | 271 | 433.16 | 1.551 | 175km W of Chichi-shima, Japan | 26.9857 | 140.4491 | Japan | 12 | 1471030787490 | 2016-08-12 15:39:47 | 15 | 39 | 8 | 47 | 2016 | . 5579 us10006dn0 | 68.0 | 4.5 | 312 | 333.35 | 1.600 | 175km WSW of Hachijo-jima, Japan | 32.5988 | 138.0139 | Japan | 13 | 1471124976500 | 2016-08-13 17:49:36 | 17 | 49 | 8 | 36 | 2016 | . 5744 us10006drq | 72.0 | 4.9 | 369 | 510.23 | 5.174 | South of the Fiji Islands | -24.3012 | -179.7104 | South of the Fiji Islands | 14 | 1471183623840 | 2016-08-14 10:07:03 | 10 | 7 | 8 | 3 | 2016 | . 5750 us10006drv | 55.0 | 4.4 | 298 | 514.52 | 3.798 | Fiji region | -17.8283 | -177.9619 | Fiji region | 14 | 1471185466020 | 2016-08-14 10:37:46 | 10 | 37 | 8 | 46 | 2016 | . 5853 us10006du0 | 57.0 | 4.4 | 298 | 444.17 | 4.364 | 140km SW of Leksula, Indonesia | -4.4948 | 125.4738 | Indonesia | 14 | 1471226063170 | 2016-08-14 21:54:23 | 21 | 54 | 8 | 23 | 2016 | . 6056 us10006f32 | 145.0 | 4.2 | 271 | 574.40 | 2.389 | 147km NNW of Kimbe, Papua New Guinea | -4.3163 | 149.6298 | Papua New Guinea | 15 | 1471301099310 | 2016-08-15 18:44:59 | 18 | 44 | 8 | 59 | 2016 | . 6421 us10006efk | 19.0 | 4.9 | 369 | 548.09 | 2.382 | 118km NNW of Kimbe, Papua New Guinea | -4.5952 | 149.6539 | Papua New Guinea | 17 | 1471446714370 | 2016-08-17 11:11:54 | 11 | 11 | 8 | 54 | 2016 | . 6422 us10006efq | 33.0 | 4.8 | 354 | 568.99 | 3.410 | 118km NNW of Kimbe, Papua New Guinea | -4.6014 | 149.6447 | Papua New Guinea | 17 | 1471446791870 | 2016-08-17 11:13:11 | 11 | 13 | 8 | 11 | 2016 | . 6434 us10006fta | 137.0 | 4.2 | 271 | 366.98 | 3.384 | 138km WSW of L&#39;Esperance Rock, New Zealand | -32.0265 | 179.8177 | New Zealand | 17 | 1471450455360 | 2016-08-17 12:14:15 | 12 | 14 | 8 | 15 | 2016 | . 6846 us10006f0p | 103.0 | 4.3 | 284 | 470.93 | 5.032 | 92km SE of Ndoi Island, Fiji | -21.3299 | -178.1818 | Fiji | 19 | 1471610407080 | 2016-08-19 08:40:07 | 8 | 40 | 8 | 7 | 2016 | . 6875 us10006f4n | 166.0 | 4.2 | 271 | 317.32 | 3.859 | 225km W of Severo-Kuril&#39;sk, Russia | 50.6225 | 152.9402 | Russia | 19 | 1471621698730 | 2016-08-19 11:48:18 | 11 | 48 | 8 | 18 | 2016 | . 7350 us10006fl7 | 41.0 | 4.5 | 312 | 519.83 | 3.198 | 259km SE of Lambasa, Fiji | -17.7203 | -178.5915 | Fiji | 21 | 1471793577030 | 2016-08-21 11:32:57 | 11 | 32 | 8 | 57 | 2016 | . 7545 us10006fq7 | 66.0 | 5.6 | 483 | 404.41 | 3.261 | Izu Islands, Japan region | 29.8965 | 139.1312 | Japan region | 22 | 1471858388650 | 2016-08-22 05:33:08 | 5 | 33 | 8 | 8 | 2016 | . 7863 us10006g2n | 11.0 | 6.0 | 554 | 532.40 | 1.359 | 132km N of Nebe, Indonesia | -7.2805 | 122.4255 | Indonesia | 23 | 1471981184660 | 2016-08-23 15:39:44 | 15 | 39 | 8 | 44 | 2016 | . 7864 us10006gj0 | 13.0 | 5.8 | 518 | 514.33 | 6.129 | 140km N of Palue, Indonesia | -7.2081 | 122.5412 | Indonesia | 23 | 1471981246230 | 2016-08-23 15:40:46 | 15 | 40 | 8 | 46 | 2016 | . 7906 us10006g77 | 72.0 | 4.2 | 271 | 397.25 | 5.550 | 88km SSW of Leksula, Indonesia | -4.5144 | 126.2058 | Indonesia | 23 | 1471997620340 | 2016-08-23 20:13:40 | 20 | 13 | 8 | 40 | 2016 | . 7927 us10006g81 | 75.0 | 4.4 | 298 | 522.01 | 4.783 | 150km ENE of Ndoi Island, Fiji | -19.9531 | -177.4594 | Fiji | 23 | 1472006271150 | 2016-08-23 22:37:51 | 22 | 37 | 8 | 51 | 2016 | . 7942 us10006g8p | 84.0 | 4.6 | 326 | 528.84 | 1.836 | 30km SSW of Palimbang, Philippines | 5.9494 | 124.1084 | Philippines | 24 | 1472012210980 | 2016-08-24 00:16:50 | 0 | 16 | 8 | 50 | 2016 | . 8274 us20006tvk | 81.0 | 4.7 | 340 | 561.20 | 5.646 | South of the Fiji Islands | -23.3085 | 179.2413 | South of the Fiji Islands | 25 | 1472137849390 | 2016-08-25 11:10:49 | 11 | 10 | 8 | 49 | 2016 | . 8303 us20006ty8 | 48.0 | 5.9 | 536 | 456.00 | 3.002 | Izu Islands, Japan region | 30.6151 | 137.8462 | Japan region | 25 | 1472144683260 | 2016-08-25 13:04:43 | 13 | 4 | 8 | 43 | 2016 | . From a quick glance above, this seemed to work! . Now, I&#39;m going to plot these values, first with a scatter plot. . deepquakes = earthquakes.loc[earthquakes[&#39;location.depth&#39;] &gt; 300] deepquakes . id impact.gap impact.magnitude impact.significance location.depth location.distance location.full location.latitude location.longitude location.name time.day time.epoch time.full time.hour time.minute time.month time.second time.year . 112 us100069gq | 84.0 | 4.4 | 298 | 540.25 | 4.539 | 192km NE of Ndoi Island, Fiji | -19.3536 | -177.4688 | Fiji | 27 | 1469629337280 | 2016-07-27 10:22:17 | 10 | 22 | 7 | 17 | 2016 | . 226 us100069i2 | 176.0 | 4.4 | 298 | 599.55 | 8.139 | South of the Fiji Islands | -25.9135 | 178.4949 | South of the Fiji Islands | 27 | 1469666202670 | 2016-07-27 20:36:42 | 20 | 36 | 7 | 42 | 2016 | . 698 us100069r1 | 257.0 | 4.0 | 246 | 442.35 | 5.700 | 174km WSW of L&#39;Esperance Rock, New Zealand | -31.9132 | 179.3506 | New Zealand | 29 | 1469802600160 | 2016-07-29 10:30:00 | 10 | 30 | 7 | 0 | 2016 | . 1115 us100068va | 94.0 | 4.5 | 312 | 534.48 | 5.766 | South of the Fiji Islands | -23.7475 | -179.9510 | South of the Fiji Islands | 30 | 1469912128690 | 2016-07-30 16:55:28 | 16 | 55 | 7 | 28 | 2016 | . 1277 us10006a4d | 159.0 | 4.4 | 298 | 552.91 | 4.961 | 108km S of Ndoi Island, Fiji | -21.6264 | -178.6404 | Fiji | 31 | 1469957607890 | 2016-07-31 05:33:27 | 5 | 33 | 7 | 27 | 2016 | . 1285 us10006a4i | 148.0 | 4.4 | 298 | 568.61 | 4.725 | 148km ENE of Ndoi Island, Fiji | -19.9161 | -177.5090 | Fiji | 31 | 1469958617080 | 2016-07-31 05:50:17 | 5 | 50 | 7 | 17 | 2016 | . 1291 us100068yc | 63.0 | 4.9 | 369 | 510.15 | 5.648 | South of the Fiji Islands | -23.8527 | -179.8836 | South of the Fiji Islands | 31 | 1469960394250 | 2016-07-31 06:19:54 | 6 | 19 | 7 | 54 | 2016 | . 1319 us10006901 | 86.0 | 4.5 | 312 | 504.34 | 3.830 | South of the Fiji Islands | -26.2414 | 179.3729 | South of the Fiji Islands | 31 | 1469970423830 | 2016-07-31 09:07:03 | 9 | 7 | 7 | 3 | 2016 | . 1400 us10006915 | 153.0 | 4.1 | 259 | 313.51 | 3.377 | 185km N of Kuril&#39;sk, Russia | 46.9009 | 147.6890 | Russia | 31 | 1469992902520 | 2016-07-31 15:21:42 | 15 | 21 | 7 | 42 | 2016 | . 1463 us1000692q | 82.0 | 4.4 | 298 | 536.01 | 3.463 | 284km SSE of Tabiauan, Philippines | 3.7369 | 123.0631 | Philippines | 31 | 1470013999200 | 2016-07-31 21:13:19 | 21 | 13 | 7 | 19 | 2016 | . 1497 us10006acb | 168.0 | 4.0 | 246 | 513.20 | 4.578 | South of the Fiji Islands | -25.1055 | 179.8371 | South of the Fiji Islands | 1 | 1470024873220 | 2016-08-01 00:14:33 | 0 | 14 | 8 | 33 | 2016 | . 1508 us1000693g | 101.0 | 4.6 | 326 | 509.04 | 4.844 | South of the Fiji Islands | -24.8047 | 179.8540 | South of the Fiji Islands | 1 | 1470028316980 | 2016-08-01 01:11:56 | 1 | 11 | 8 | 56 | 2016 | . 1544 us10006949 | 97.0 | 4.4 | 298 | 303.82 | 3.531 | 31km W of Agrihan, Northern Mariana Islands | 18.7680 | 145.3657 | Northern Mariana Islands | 1 | 1470035287100 | 2016-08-01 03:08:07 | 3 | 8 | 8 | 7 | 2016 | . 1711 us10006996 | 52.0 | 4.3 | 284 | 564.06 | 3.254 | 271km SE of Lambasa, Fiji | -17.8301 | -178.5327 | Fiji | 1 | 1470073523490 | 2016-08-01 13:45:23 | 13 | 45 | 8 | 23 | 2016 | . 2045 us10006af1 | 178.0 | 4.3 | 284 | 528.57 | 6.002 | South of the Fiji Islands | -23.4608 | -179.8971 | South of the Fiji Islands | 2 | 1470167385530 | 2016-08-02 15:49:45 | 15 | 49 | 8 | 45 | 2016 | . 2068 us10006af2 | 103.0 | 4.5 | 312 | 622.13 | 6.191 | Vanuatu region | -14.9295 | 172.3000 | Vanuatu region | 2 | 1470173941310 | 2016-08-02 17:39:01 | 17 | 39 | 8 | 1 | 2016 | . 2078 us10006af3 | 175.0 | 4.2 | 271 | 501.74 | 6.979 | South of the Fiji Islands | -24.5027 | -179.9427 | South of the Fiji Islands | 2 | 1470176180820 | 2016-08-02 18:16:20 | 18 | 16 | 8 | 20 | 2016 | . 2104 us10006afc | 81.0 | 4.4 | 298 | 523.19 | 5.469 | 152km ESE of Ndoi Island, Fiji | -21.0197 | -177.2917 | Fiji | 2 | 1470185183580 | 2016-08-02 20:46:23 | 20 | 46 | 8 | 23 | 2016 | . 2267 us100069q5 | 37.0 | 4.5 | 312 | 611.84 | 3.146 | 276km N of Ndoi Island, Fiji | -18.1535 | -178.6700 | Fiji | 3 | 1470230463180 | 2016-08-03 09:21:03 | 9 | 21 | 8 | 3 | 2016 | . 2298 us100069sl | 89.0 | 4.4 | 298 | 553.62 | 4.262 | 59km NE of Ndoi Island, Fiji | -20.2611 | -178.2997 | Fiji | 3 | 1470238008360 | 2016-08-03 11:26:48 | 11 | 26 | 8 | 48 | 2016 | . 2384 us10006afw | 79.0 | 4.2 | 271 | 526.13 | 2.999 | 235km SE of Lambasa, Fiji | -17.6380 | -178.8027 | Fiji | 3 | 1470263999630 | 2016-08-03 18:39:59 | 18 | 39 | 8 | 59 | 2016 | . 2402 us10006afx | 143.0 | 4.4 | 298 | 538.08 | 3.652 | 294km NNE of Ndoi Island, Fiji | -18.0490 | -178.1246 | Fiji | 3 | 1470268349840 | 2016-08-03 19:52:29 | 19 | 52 | 8 | 29 | 2016 | . 2719 us10006a2k | 13.0 | 6.3 | 611 | 510.00 | 2.145 | 70km ENE of Iwo Jima, Japan | 24.9477 | 142.0074 | Japan | 4 | 1470327873540 | 2016-08-04 12:24:33 | 12 | 24 | 8 | 33 | 2016 | . 3093 us10006bsv | 77.0 | 4.4 | 298 | 567.13 | 4.506 | 34km SSE of Ndoi Island, Fiji | -20.9321 | -178.5556 | Fiji | 5 | 1470452387980 | 2016-08-05 22:59:47 | 22 | 59 | 8 | 47 | 2016 | . 3109 us10006bsz | 74.0 | 4.1 | 259 | 599.18 | 3.331 | 289km N of Ndoi Island, Fiji | -18.0412 | -178.4624 | Fiji | 5 | 1470455086500 | 2016-08-05 23:44:46 | 23 | 44 | 8 | 46 | 2016 | . 3180 us10006btm | 124.0 | 4.3 | 284 | 573.68 | 5.362 | South of the Fiji Islands | -23.0231 | 179.2082 | South of the Fiji Islands | 6 | 1470470336240 | 2016-08-06 03:58:56 | 3 | 58 | 8 | 56 | 2016 | . 3376 us10006ccd | 131.0 | 4.0 | 246 | 342.80 | 6.767 | 213km WNW of Farallon de Pajaros, Northern Mar... | 21.5472 | 143.1465 | Northern Mariana Islands | 6 | 1470527381330 | 2016-08-06 19:49:41 | 19 | 49 | 8 | 41 | 2016 | . 3751 us10006cwr | 143.0 | 4.3 | 284 | 503.77 | 7.122 | South of the Fiji Islands | -24.6090 | -179.7836 | South of the Fiji Islands | 8 | 1470629761640 | 2016-08-08 00:16:01 | 0 | 16 | 8 | 1 | 2016 | . 3914 us10006c1y | 128.0 | 4.5 | 312 | 372.28 | 3.146 | 116km WSW of L&#39;Esperance Rock, New Zealand | -31.8191 | 179.9594 | New Zealand | 8 | 1470664387390 | 2016-08-08 09:53:07 | 9 | 53 | 8 | 7 | 2016 | . 4029 us10006c6w | 76.0 | 4.4 | 298 | 531.25 | 5.819 | South of the Fiji Islands | -23.6888 | -179.9401 | South of the Fiji Islands | 8 | 1470697343920 | 2016-08-08 19:02:23 | 19 | 2 | 8 | 23 | 2016 | . 4129 us10006cys | 186.0 | 4.2 | 271 | 498.50 | 12.956 | South of the Fiji Islands | -24.6560 | -179.9177 | South of the Fiji Islands | 9 | 1470728468380 | 2016-08-09 03:41:08 | 3 | 41 | 8 | 8 | 2016 | . 4130 us10006cyu | 152.0 | 4.0 | 246 | 360.41 | 2.900 | 229km SW of Vostok, Russia | 47.3008 | 146.9788 | Russia | 9 | 1470728648370 | 2016-08-09 03:44:08 | 3 | 44 | 8 | 8 | 2016 | . 4563 us10006cn4 | 178.0 | 4.3 | 284 | 583.34 | 3.038 | 246km SE of Lambasa, Fiji | -17.7464 | -178.7591 | Fiji | 10 | 1470849096270 | 2016-08-10 13:11:36 | 13 | 11 | 8 | 36 | 2016 | . 5045 us10006d6y | 54.0 | 4.5 | 312 | 484.69 | 2.354 | 265km WNW of Chichi-shima, Japan | 27.8826 | 139.6848 | Japan | 12 | 1470976076080 | 2016-08-12 00:27:56 | 0 | 27 | 8 | 56 | 2016 | . 5251 us10006dfc | 70.0 | 4.2 | 271 | 433.16 | 1.551 | 175km W of Chichi-shima, Japan | 26.9857 | 140.4491 | Japan | 12 | 1471030787490 | 2016-08-12 15:39:47 | 15 | 39 | 8 | 47 | 2016 | . 5579 us10006dn0 | 68.0 | 4.5 | 312 | 333.35 | 1.600 | 175km WSW of Hachijo-jima, Japan | 32.5988 | 138.0139 | Japan | 13 | 1471124976500 | 2016-08-13 17:49:36 | 17 | 49 | 8 | 36 | 2016 | . 5744 us10006drq | 72.0 | 4.9 | 369 | 510.23 | 5.174 | South of the Fiji Islands | -24.3012 | -179.7104 | South of the Fiji Islands | 14 | 1471183623840 | 2016-08-14 10:07:03 | 10 | 7 | 8 | 3 | 2016 | . 5750 us10006drv | 55.0 | 4.4 | 298 | 514.52 | 3.798 | Fiji region | -17.8283 | -177.9619 | Fiji region | 14 | 1471185466020 | 2016-08-14 10:37:46 | 10 | 37 | 8 | 46 | 2016 | . 5853 us10006du0 | 57.0 | 4.4 | 298 | 444.17 | 4.364 | 140km SW of Leksula, Indonesia | -4.4948 | 125.4738 | Indonesia | 14 | 1471226063170 | 2016-08-14 21:54:23 | 21 | 54 | 8 | 23 | 2016 | . 6056 us10006f32 | 145.0 | 4.2 | 271 | 574.40 | 2.389 | 147km NNW of Kimbe, Papua New Guinea | -4.3163 | 149.6298 | Papua New Guinea | 15 | 1471301099310 | 2016-08-15 18:44:59 | 18 | 44 | 8 | 59 | 2016 | . 6421 us10006efk | 19.0 | 4.9 | 369 | 548.09 | 2.382 | 118km NNW of Kimbe, Papua New Guinea | -4.5952 | 149.6539 | Papua New Guinea | 17 | 1471446714370 | 2016-08-17 11:11:54 | 11 | 11 | 8 | 54 | 2016 | . 6422 us10006efq | 33.0 | 4.8 | 354 | 568.99 | 3.410 | 118km NNW of Kimbe, Papua New Guinea | -4.6014 | 149.6447 | Papua New Guinea | 17 | 1471446791870 | 2016-08-17 11:13:11 | 11 | 13 | 8 | 11 | 2016 | . 6434 us10006fta | 137.0 | 4.2 | 271 | 366.98 | 3.384 | 138km WSW of L&#39;Esperance Rock, New Zealand | -32.0265 | 179.8177 | New Zealand | 17 | 1471450455360 | 2016-08-17 12:14:15 | 12 | 14 | 8 | 15 | 2016 | . 6846 us10006f0p | 103.0 | 4.3 | 284 | 470.93 | 5.032 | 92km SE of Ndoi Island, Fiji | -21.3299 | -178.1818 | Fiji | 19 | 1471610407080 | 2016-08-19 08:40:07 | 8 | 40 | 8 | 7 | 2016 | . 6875 us10006f4n | 166.0 | 4.2 | 271 | 317.32 | 3.859 | 225km W of Severo-Kuril&#39;sk, Russia | 50.6225 | 152.9402 | Russia | 19 | 1471621698730 | 2016-08-19 11:48:18 | 11 | 48 | 8 | 18 | 2016 | . 7350 us10006fl7 | 41.0 | 4.5 | 312 | 519.83 | 3.198 | 259km SE of Lambasa, Fiji | -17.7203 | -178.5915 | Fiji | 21 | 1471793577030 | 2016-08-21 11:32:57 | 11 | 32 | 8 | 57 | 2016 | . 7545 us10006fq7 | 66.0 | 5.6 | 483 | 404.41 | 3.261 | Izu Islands, Japan region | 29.8965 | 139.1312 | Japan region | 22 | 1471858388650 | 2016-08-22 05:33:08 | 5 | 33 | 8 | 8 | 2016 | . 7863 us10006g2n | 11.0 | 6.0 | 554 | 532.40 | 1.359 | 132km N of Nebe, Indonesia | -7.2805 | 122.4255 | Indonesia | 23 | 1471981184660 | 2016-08-23 15:39:44 | 15 | 39 | 8 | 44 | 2016 | . 7864 us10006gj0 | 13.0 | 5.8 | 518 | 514.33 | 6.129 | 140km N of Palue, Indonesia | -7.2081 | 122.5412 | Indonesia | 23 | 1471981246230 | 2016-08-23 15:40:46 | 15 | 40 | 8 | 46 | 2016 | . 7906 us10006g77 | 72.0 | 4.2 | 271 | 397.25 | 5.550 | 88km SSW of Leksula, Indonesia | -4.5144 | 126.2058 | Indonesia | 23 | 1471997620340 | 2016-08-23 20:13:40 | 20 | 13 | 8 | 40 | 2016 | . 7927 us10006g81 | 75.0 | 4.4 | 298 | 522.01 | 4.783 | 150km ENE of Ndoi Island, Fiji | -19.9531 | -177.4594 | Fiji | 23 | 1472006271150 | 2016-08-23 22:37:51 | 22 | 37 | 8 | 51 | 2016 | . 7942 us10006g8p | 84.0 | 4.6 | 326 | 528.84 | 1.836 | 30km SSW of Palimbang, Philippines | 5.9494 | 124.1084 | Philippines | 24 | 1472012210980 | 2016-08-24 00:16:50 | 0 | 16 | 8 | 50 | 2016 | . 8274 us20006tvk | 81.0 | 4.7 | 340 | 561.20 | 5.646 | South of the Fiji Islands | -23.3085 | 179.2413 | South of the Fiji Islands | 25 | 1472137849390 | 2016-08-25 11:10:49 | 11 | 10 | 8 | 49 | 2016 | . 8303 us20006ty8 | 48.0 | 5.9 | 536 | 456.00 | 3.002 | Izu Islands, Japan region | 30.6151 | 137.8462 | Japan region | 25 | 1472144683260 | 2016-08-25 13:04:43 | 13 | 4 | 8 | 43 | 2016 | . deepquakes.plot(kind=&#39;scatter&#39;, x=&#39;impact.magnitude&#39;, y=&#39;location.depth&#39;) . &lt;AxesSubplot:xlabel=&#39;impact.magnitude&#39;, ylabel=&#39;location.depth&#39;&gt; . From looking above, it doesnt seem like there&#39;s a huge correlation between magnitude and depth. I&#39;ll try adding some more visual features to make this clear. . dotcolors = [] for i in deepquakes.index: if deepquakes.loc[i,&#39;location.depth&#39;] &lt; 300: dotcolors.append(&#39;grey&#39;) elif deepquakes.loc[i,&#39;location.depth&#39;] &gt;= 300 and deepquakes.loc[i,&#39;location.depth&#39;] &lt; 400: dotcolors.append(&#39;blue&#39;) elif deepquakes.loc[i,&#39;location.depth&#39;] &gt;= 400 and deepquakes.loc[i,&#39;location.depth&#39;] &lt; 500: dotcolors.append(&#39;purple&#39;) elif deepquakes.loc[i,&#39;location.depth&#39;] &gt;= 500 and deepquakes.loc[i,&#39;location.depth&#39;] &lt; 600: dotcolors.append(&#39;orange&#39;) else: dotcolors.append(&#39;red&#39;) deepquakes.plot(kind=&#39;scatter&#39;, x=&#39;impact.magnitude&#39;, y=&#39;location.depth&#39;, color=dotcolors) . &lt;AxesSubplot:xlabel=&#39;impact.magnitude&#39;, ylabel=&#39;location.depth&#39;&gt; . As we can see above, there does not seem to be any linear correlation between depth and magnitude. Let&#39;s also try this with a bar graph. . # We also want to sort the magnitudes (sort values) and make the chart bigger (figsize) for better visibility barcolors = [] for i in deepquakes.index: if deepquakes.loc[i,&#39;location.depth&#39;] &lt; 300: barcolors.append(&#39;grey&#39;) elif deepquakes.loc[i,&#39;location.depth&#39;] &gt;= 300 and deepquakes.loc[i,&#39;location.depth&#39;] &lt; 400: barcolors.append(&#39;blue&#39;) elif deepquakes.loc[i,&#39;location.depth&#39;] &gt;= 400 and deepquakes.loc[i,&#39;location.depth&#39;] &lt; 500: barcolors.append(&#39;purple&#39;) elif deepquakes.loc[i,&#39;location.depth&#39;] &gt;= 500 and deepquakes.loc[i,&#39;location.depth&#39;] &lt; 600: barcolors.append(&#39;orange&#39;) else: barcolors.append(&#39;red&#39;) deepquakes.sort_values(by=&#39;impact.magnitude&#39;).plot(kind=&#39;bar&#39;, x=&#39;impact.magnitude&#39;, y=&#39;location.depth&#39;, color=barcolors, figsize=(12,5)) . &lt;AxesSubplot:xlabel=&#39;impact.magnitude&#39;&gt; .",
            "url": "https://spurthirallapalli.github.io/DH140SampleFastAI/fastpages/jupyter/2022/03/08/Assignment03.html",
            "relUrl": "/fastpages/jupyter/2022/03/08/Assignment03.html",
            "date": " • Mar 8, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://spurthirallapalli.github.io/DH140SampleFastAI/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://spurthirallapalli.github.io/DH140SampleFastAI/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://spurthirallapalli.github.io/DH140SampleFastAI/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://spurthirallapalli.github.io/DH140SampleFastAI/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}